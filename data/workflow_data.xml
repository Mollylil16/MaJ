<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Automatisation pour les commandes -->
    <record id="automation_validate_commande" model="base.automation">
        <field name="name">Validation Commande</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="trigger">on_write</field>
        <field name="filter_pre_domain">[('state', '=', 'draft')]</field>
        <field name="filter_post_domain">[('state', '=', 'confirmed')]</field>
        <field name="action_server_id" ref="action_validate_commande"/>
    </record>

    <record id="action_validate_commande" model="ir.actions.server">
        <field name="name">Action Validation Commande</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'confirmed'})
            record.message_post(
                body=f'Commande {record.name} confirmée et envoyée à la validation',
                subject='Commande Confirmée',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <record id="automation_approve_commande" model="base.automation">
        <field name="name">Approuver Commande</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="trigger">on_write</field>
        <field name="filter_pre_domain">[('state', '=', 'confirmed')]</field>
        <field name="filter_post_domain">[('state', '=', 'approved')]</field>
        <field name="action_server_id" ref="action_approve_commande"/>
    </record>

    <record id="action_approve_commande" model="ir.actions.server">
        <field name="name">Action Approuver Commande</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'approved'})
            record.message_post(
                body=f'Commande {record.name} approuvée',
                subject='Commande Approuvée',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <!-- Automatisation pour les factures -->
    <record id="automation_validate_facture" model="base.automation">
        <field name="name">Validation Facture</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_facture_finale"/>
        <field name="trigger">on_write</field>
        <field name="filter_pre_domain">[('state', '=', 'draft')]</field>
        <field name="filter_post_domain">[('state', '=', 'confirmed')]</field>
        <field name="action_server_id" ref="action_validate_facture"/>
    </record>

    <record id="action_validate_facture" model="ir.actions.server">
        <field name="name">Action Validation Facture</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_facture_finale"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'confirmed'})
            record.message_post(
                body=f'Facture {record.name} confirmée et envoyée à la validation',
                subject='Facture Confirmée',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <record id="automation_approve_facture" model="base.automation">
        <field name="name">Approuver Facture</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_facture_finale"/>
        <field name="trigger">on_write</field>
        <field name="filter_pre_domain">[('state', '=', 'confirmed')]</field>
        <field name="filter_post_domain">[('state', '=', 'approved')]</field>
        <field name="action_server_id" ref="action_approve_facture"/>
    </record>

    <record id="action_approve_facture" model="ir.actions.server">
        <field name="name">Action Approuver Facture</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_facture_finale"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'approved'})
            record.message_post(
                body=f'Facture {record.name} approuvée',
                subject='Facture Approuvée',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <!-- Workflow pour les paiements -->
    <record id="act_server_validate_paiement" model="ir.actions.server">
        <field name="name">Validation Paiement</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_paiement_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'confirmed'})
            env['mail.thread'].message_post(
                body=f'Paiement {record.name} confirmé et envoyé à la validation',
                subject='Paiement Confirmé',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <record id="act_server_approve_paiement" model="ir.actions.server">
        <field name="name">Approuver Paiement</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_paiement_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'approved'})
            env['mail.thread'].message_post(
                body=f'Paiement {record.name} approuvé',
                subject='Paiement Approuvé',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <!-- Automatisation pour la validation des partenaires exclusifs -->
    <record id="automation_validate_partenaire" model="base.automation">
        <field name="name">Validation Partenaire</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="trigger">on_create_or_write</field>
        <field name="filter_pre_domain">[('fournisseur_id', '!=', False), ('state', '=', 'draft')]</field>
        <field name="filter_post_domain">[('state', '=', 'validate')]</field>
        <field name="action_server_id" ref="action_validate_partenaire"/>
    </record>

    <record id="action_validate_partenaire" model="ir.actions.server">
        <field name="name">Action Validation Partenaire</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            partenariat = env['gestion_comptable_sfec.partenariat_exclusif'].search([
                ('fournisseur_id', '=', record.fournisseur_id.id),
                ('state', '=', 'active')
            ])
            if partenariat:
                record.write({'state': 'validate'})
                record.message_post(
                    body=f'Commande {record.name} automatiquement validée pour le partenaire exclusif {record.fournisseur_id.name}',
                    subject='Validation Commande Partenaire Exclusif',
                    subtype_xmlid='mail.mt_comment'
                )
        </field>
    </record>

    <!-- Automatisation pour la génération d'accusé de réception -->
    <record id="automation_generate_accuse" model="base.automation">
        <field name="name">Génération Accusé Réception</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="trigger">on_write</field>
        <field name="filter_pre_domain">[('state', '=', 'confirmed')]</field>
        <field name="filter_post_domain">[('state', '=', 'accuse')]</field>
        <field name="action_server_id" ref="action_generate_accuse"/>
    </record>

    <record id="action_generate_accuse" model="ir.actions.server">
        <field name="name">Action Génération Accusé Réception</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_bon_commande_client"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            record.write({'state': 'accuse'})
            record.message_post(
                body=f'Accusé de réception généré pour la commande {record.name}',
                subject='Accusé de Réception',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <!-- Workflow pour la mise à jour automatique du stock -->
    <record id="act_server_update_stock" model="ir.actions.server">
        <field name="name">Mise à jour Stock</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_stock_mouvement"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            for ligne in record.ligne_ids:
                produit = ligne.produit_id
                produit.sudo().write({
                    'qty_available': produit.qty_available + ligne.quantite
                })
            env['mail.thread'].message_post(
                body=f'Mise à jour du stock pour le mouvement {record.name}',
                subject='Mise à jour Stock',
                subtype_xmlid='mail.mt_comment'
            )
        </field>
    </record>

    <!-- Workflow pour les relances clients -->
    <record id="act_server_relance_client" model="ir.actions.server">
        <field name="name">Relance Client</field>
        <field name="model_id" ref="model_gestion_comptable_sfec_facture_finale"/>
        <field name="state">code</field>
        <field name="code">
            #python: 
            if record.etat == 'brouillon' and record.date_echeance < fields.Date.today():
                template = env.ref('gestion_comptable_sfec.email_template_relance_client')
                template.send_mail(record.id)
                env['mail.thread'].message_post(
                    body=f'Relance envoyée pour la facture {record.name}',
                    subject='Relance Client',
                    subtype_xmlid='mail.mt_comment'
                )
        </field>
    </record>
</odoo>
